// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URI")
    shadowDatabaseUrl = env("DATABASE_SHADOW_URI")
}

model Roles {
    role_id                     Int                         @id @default(autoincrement())
    role_name                   String                      
    role_description            String?                      @db.Text
    activities                  Activities[]
    students                    StudentRoles[]
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt
}

model StudentRoles {
    student                     Students                    @relation(fields: [student_id], references: [student_id])
    role                        Roles                       @relation(fields: [role_id], references: [role_id])
    student_id                  String                      @map("student_id")
    role_id                     Int                         @map("role_id")
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt

    @@id([student_id, role_id])
}

model PersonPrefix {
    prefix_id                   Int                         @id @default(autoincrement())
    prefix_name                 String                      @db.VarChar(10)
    prefix_name_short           String                      @db.VarChar(8)
    gender                      String                      @db.VarChar(10)
    students                    Students[]
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt
}

model Students {
    student_id                  String                      @id @db.VarChar(13)
    student_uuid                String                      @unique @default(uuid())
    student_password            String                      @db.VarChar(70)
    student_prefix              PersonPrefix                @relation(fields: [student_prefix_id], references: [prefix_id])
    student_prefix_id           Int         
    student_firstname           String                      @db.VarChar(30)
    student_lastname            String                      @db.VarChar(30)
    student_year_admission      String                      @db.VarChar(4)
    department                  Departments                 @relation(fields: [student_department_id], references: [department_id])      
    student_department_id       String
    activities_participated     ActivitiesParticipated[]          
    student_roles               StudentRoles[]
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt
}

model Departments {
    students                    Students[]       
    activities                  Activities[]
    department_id               String                      @id 
    department_fullname_th      String
    department_fullname_en      String           
    department_type             String                  
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt
}

model ActivityType {
    activities                  Activities[]
    activitytype_id             Int                         @id
    activitytype_name           String
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt
}

model Activities {
    activity_id                 String                      @id @default(uuid())
    activity_name               String                      @db.VarChar(50)
    activity_description        String?                     @db.Text
    activity_department         Departments                 @relation(fields: [activity_department_id], references: [department_id])
    activity_department_id      String
    activity_date               String                      @db.VarChar(20) //เวลา UTC
    activity_type               ActivityType                @relation(fields: [activity_type_id], references: [activitytype_id])
    activity_type_id            Int
    activity_participated       ActivitiesParticipated[]
    activity_role               Roles                       @relation(fields: [activity_role_admin_id], references: [role_id])
    activity_role_admin_id      Int
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt
}

model ActivitiesParticipated {
    id                          Int                         @id @default(autoincrement())
    student                     Students                    @relation(fields: [student_id], references: [student_id])
    student_id                  String
    activity                    Activities                  @relation(fields: [activity_id], references: [activity_id])    
    activity_id                 String      
    activity_checked            Boolean                     @default(true)
    activity_checked_late       Boolean                     @default(false)
    created_at                  DateTime                    @default(now())
    updated_at                  DateTime                    @updatedAt
}